{"searchDocs":[{"title":"Introduction","type":0,"sectionRef":"#","url":"/Mailroom/docs/intro","content":"Introduction Mailroom is a DataStore abstraction that is designed to support lockless interaction with data and transactions.","keywords":"","version":"Next"},{"title":"Collection","type":0,"sectionRef":"#","url":"/Mailroom/api/Collection","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Collection","url":"/Mailroom/api/Collection#functions","content":" ","version":null,"tagName":"h2"},{"title":"get​","type":1,"pageTitle":"Collection","url":"/Mailroom/api/Collection#get","content":"&lt;/&gt; Collection:get(key: string) → Document Get a document from the collection. ","version":null,"tagName":"h3"},{"title":"Snapshot","type":0,"sectionRef":"#","url":"/Mailroom/api/Snapshot","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Snapshot","url":"/Mailroom/api/Snapshot#functions","content":" ","version":null,"tagName":"h2"},{"title":"get​","type":1,"pageTitle":"Snapshot","url":"/Mailroom/api/Snapshot#get","content":"&lt;/&gt; Snapshot:get() → Data Get the current data and metadata of the snapshot.  ","version":null,"tagName":"h3"},{"title":"update​","type":1,"pageTitle":"Snapshot","url":"/Mailroom/api/Snapshot#update","content":"&lt;/&gt; Snapshot:update(action: Action) → PatchResult Update the snapshot.  ","version":null,"tagName":"h3"},{"title":"sync​","type":1,"pageTitle":"Snapshot","url":"/Mailroom/api/Snapshot#sync","content":"&lt;/&gt; Snapshot:sync() → PatchResult Sync the snapshot with the DataStore. ","version":null,"tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Mailroom/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Interacting with data​","type":1,"pageTitle":"Getting Started","url":"/Mailroom/docs/getting-started#interacting-with-data","content":" In order to interact with data, including reading it, a Snapshot is required:  local snapshot = Mailroom:createSnapshot(document) print(snapshot:get()) -- prints the data   ","version":"Next","tagName":"h2"},{"title":"Updating data​","type":1,"pageTitle":"Getting Started","url":"/Mailroom/docs/getting-started#updating-data","content":" One concern when operating locklessly is overwriting data saved on another server. Mailroom prevents this issue by taking an approach similar to UpdateAsync:  snapshot:update(function(data) -- data can be updated here and then returned return { coins = data.coins + 3 } end)  ","version":"Next","tagName":"h2"},{"title":"Document","type":0,"sectionRef":"#","url":"/Mailroom/api/Document","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Document","url":"/Mailroom/api/Document#types","content":" ","version":null,"tagName":"h2"},{"title":"LoadTransform​","type":1,"pageTitle":"Document","url":"/Mailroom/api/Document#LoadTransform","content":"&lt;/&gt; type LoadTransform = (data: unknown?) → Data   ","version":null,"tagName":"h3"},{"title":"SaveTransform​","type":1,"pageTitle":"Document","url":"/Mailroom/api/Document#SaveTransform","content":"&lt;/&gt; type SaveTransform = (data: Data) → any   ","version":null,"tagName":"h3"},{"title":"Action​","type":1,"pageTitle":"Document","url":"/Mailroom/api/Document#Action","content":"&lt;/&gt; type Action = (data: Data) → Data?  ","version":null,"tagName":"h3"},{"title":"Mailroom","type":0,"sectionRef":"#","url":"/Mailroom/api/Mailroom","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Mailroom","url":"/Mailroom/api/Mailroom#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Mailroom","url":"/Mailroom/api/Mailroom#new","content":"&lt;/&gt; Mailroom.new(options: MailroomOptions?) → Mailroom Construct a new Mailroom instance. In general, only one Mailroom instance should be created.  ","version":null,"tagName":"h3"},{"title":"runTransaction​","type":1,"pageTitle":"Mailroom","url":"/Mailroom/api/Mailroom#runTransaction","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Mailroom:runTransaction(actionsMap: {[Snapshot | Document]: {Action}}) → number Run a transaction on a set of snapshots and documents. actionsMap is a map of snapshots or documents to an array of Actions to run on them. The actions are applied in the order they are given.  ","version":null,"tagName":"h3"},{"title":"createCollection​","type":1,"pageTitle":"Mailroom","url":"/Mailroom/api/Mailroom#createCollection","content":"&lt;/&gt; Mailroom:createCollection( dataStore: DataStore , loadTransform: LoadTransform, saveTransform: SaveTransform ) → Collection Create a new collection.  ","version":null,"tagName":"h3"},{"title":"createSnapshot​","type":1,"pageTitle":"Mailroom","url":"/Mailroom/api/Mailroom#createSnapshot","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Mailroom:createSnapshot( parent: Document | Snapshot, options?: {updateCallback: () → ()?} ) → Snapshot Create a new snapshot with a document or another snapshot as parent. ","version":null,"tagName":"h3"},{"title":"Transactions","type":0,"sectionRef":"#","url":"/Mailroom/docs/transactions","content":"","keywords":"","version":"Next"},{"title":"Transaction Stages​","type":1,"pageTitle":"Transactions","url":"/Mailroom/docs/transactions#transaction-stages","content":" Transactions additionally support multiple stages, where if one stage fails, the data as of the previous stage successfully saves:  Mailroom:runTransaction({ [snapshot1] = { function(coins) return coins + 3 -- this would save end, function(coins) error(&quot;this stage fails&quot;) end }, [snapshot2] = { function(coins) return coins - 3 -- this would save end, function(coins) coins *= 2 -- this would NOT save end } })  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}