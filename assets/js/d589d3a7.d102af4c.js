"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[924],{6475:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"getting-started","title":"Getting Started","description":"Mailroom takes a few different approaches from other DataStore abstractions, which will be explored first.","source":"@site/docs/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/Mailroom/docs/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/Matthew1177/Mailroom/edit/main/docs/getting-started.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Introduction","permalink":"/Mailroom/docs/intro"},"next":{"title":"Transactions","permalink":"/Mailroom/docs/transactions"}}');var r=n(4848),i=n(8453);const o={sidebar_position:2},s="Getting Started",d={},c=[{value:"Interacting with data",id:"interacting-with-data",level:2},{value:"Updating data",id:"updating-data",level:2}];function l(t){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,r.jsx)(e.p,{children:"Mailroom takes a few different approaches from other DataStore abstractions, which will be explored first."}),"\n",(0,r.jsx)(e.h2,{id:"interacting-with-data",children:"Interacting with data"}),"\n",(0,r.jsx)(e.p,{children:"In order to interact with data, including reading it, a Snapshot is required:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:"local snapshot = Mailroom:createSnapshot(document)\n\nprint(snapshot:get()) -- prints the data\n"})}),"\n",(0,r.jsx)(e.h2,{id:"updating-data",children:"Updating data"}),"\n",(0,r.jsx)(e.p,{children:"One concern when operating locklessly is overwriting data saved on another server. Mailroom prevents this issue by taking an approach similar to UpdateAsync:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:"snapshot:update(function(data)\n    -- data can be updated here and then returned\n    return {\n        coins = data.coins + 3\n    }\nend)\n"})})]})}function h(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>s});var a=n(6540);const r={},i=a.createContext(r);function o(t){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:o(t.components),a.createElement(i.Provider,{value:e},t.children)}}}]);