"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60],{6940:(n,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>e,toc:()=>d});const e=JSON.parse('{"id":"transactions","title":"Transactions","description":"Mailroom provides support for transactions:","source":"@site/docs/transactions.md","sourceDirName":".","slug":"/transactions","permalink":"/Mailroom/docs/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/Matthew1177/Mailroom/edit/main/docs/transactions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Getting Started","permalink":"/Mailroom/docs/getting-started"}}');var o=t(4848),a=t(8453);const i={sidebar_position:3},r="Transactions",c={},d=[{value:"Transaction Stages",id:"transaction-stages",level:2}];function l(n){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"transactions",children:"Transactions"})}),"\n",(0,o.jsx)(s.p,{children:"Mailroom provides support for transactions:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lua",children:"Mailroom:runTransaction({\n    [snapshot1] = {\n        function(coins)\n            return coins + 3\n        end\n    },\n    [snapshot2] = {\n        function(coins)\n            return coins - 3\n        end\n    }\n})\n"})}),"\n",(0,o.jsx)(s.p,{children:"One observation is that two document's data cannot both be accessed at the same time, and this is intentional, as it would make transactions more costly to do than usually necessary. On the off-chance where this is required, assertions can be made in order to ensure that the data has not changed from what is expected:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lua",children:"local oldCoins1 = snapshot1:get()\nlocal oldCoins2 = snapshot2:get()\nMailroom:runTransaction({\n    [snapshot1] = {\n        function(coins)\n            assert(coins == oldCoins1)\n            return coins + 3\n        end\n    },\n    [snapshot2] = {\n        function(coins)\n            assert(coins == oldCoins2)\n            return coins - 3\n        end\n    }\n})\n"})}),"\n",(0,o.jsx)(s.h2,{id:"transaction-stages",children:"Transaction Stages"}),"\n",(0,o.jsx)(s.p,{children:"Transactions additionally support multiple stages, where if one stage fails, the data as of the previous stage successfully saves:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-lua",children:'Mailroom:runTransaction({\n    [snapshot1] = {\n        function(coins)\n            return coins + 3 -- this would save\n        end,\n        function(coins)\n            error("this stage fails")\n        end\n    },\n    [snapshot2] = {\n        function(coins)\n            return coins - 3 -- this would save\n        end,\n        function(coins)\n            coins *= 2 -- this would NOT save\n        end\n    }\n})\n'})})]})}function u(n={}){const{wrapper:s}={...(0,a.R)(),...n.components};return s?(0,o.jsx)(s,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}},8453:(n,s,t)=>{t.d(s,{R:()=>i,x:()=>r});var e=t(6540);const o={},a=e.createContext(o);function i(n){const s=e.useContext(a);return e.useMemo((function(){return"function"==typeof n?n(s):{...s,...n}}),[s,n])}function r(n){let s;return s=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),e.createElement(a.Provider,{value:s},n.children)}}}]);